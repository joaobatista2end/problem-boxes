
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."get_problem_box_with_problems"("p_id" bigint) RETURNS "json"
    LANGUAGE "plpgsql"
    AS $$begin
  return (
    select json_build_object(
      'id', bx.id,
      'title', bx.title,
      'description', bx.description,
      'thumbnail_url', bx.thumbnail_url,
      'problems', COALESCE(
        (select json_agg(
          json_build_object(
            'id', p.id,
            'title', p.title,
            'user_id', p.user_id,
            'description', p.description,
            'created_at', p.created_at,
            'tags', (
              select json_agg(t.name)
              from problems_tag_belongs_problem ptbp
              join problem_tags t on ptbp.problem_tag_id = t.id
              where ptbp.problem_id = p.id
            )
          )
        ) from problems p where p.problem_box_id = bx.id),
        json_build_array()
      )
    )
    from problem_boxes bx
    where bx.id = p_id
  );
end;$$;

ALTER FUNCTION "public"."get_problem_box_with_problems"("p_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_problem_with_tags"("p_id" bigint) RETURNS "json"
    LANGUAGE "plpgsql"
    AS $$
begin
  return (
    select json_build_object(
      'id', p.id,
      'title', p.title,
      'description', p.description,
      'created_at', p.created_at,
      'tags', (
        select json_agg(t.name)
        from problems_tag_belongs_problem ptbp
        join problem_tags t on ptbp.problem_tag_id = t.id
        where ptbp.problem_id = p.id
      ),
      'problemBox', json_build_object(
        'id', pb.id,
        'title', pb.title,
        'description', pb.description,
        'thumbnail_url', pb.thumbnail_url
      )
    )
    from problems p
    join problem_boxes pb on pb.id = p.problem_box_id
    where p.id = p_id
  );
end;
$$;

ALTER FUNCTION "public"."get_problem_with_tags"("p_id" bigint) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."problem_boxes" (
    "id" bigint NOT NULL,
    "description" "text",
    "thumbnail_url" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying
);

ALTER TABLE "public"."problem_boxes" OWNER TO "postgres";

ALTER TABLE "public"."problem_boxes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."problem-boxes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."problem_tags" (
    "id" bigint NOT NULL,
    "name" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."problem_tags" OWNER TO "postgres";

ALTER TABLE "public"."problem_tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."problem-tags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."problem_files" (
    "id" bigint NOT NULL,
    "problem_id" bigint,
    "file_url" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."problem_files" OWNER TO "postgres";

ALTER TABLE "public"."problem_files" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."problem_files_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."problems" (
    "id" bigint NOT NULL,
    "title" character varying,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "problem_box_id" bigint,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);

ALTER TABLE "public"."problems" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."problems_tag_belongs_problem" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "problem_tag_id" bigint,
    "problem_id" bigint
);

ALTER TABLE "public"."problems_tag_belongs_problem" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."problem_view" AS
 SELECT "problems"."id",
    "problems"."title" AS "problema",
    "problem_tags"."name" AS "tag"
   FROM (("public"."problems"
     LEFT JOIN "public"."problems_tag_belongs_problem" ON (("problems"."id" = "problems_tag_belongs_problem"."problem_id")))
     LEFT JOIN "public"."problem_tags" ON (("problems_tag_belongs_problem"."problem_tag_id" = "problem_tags"."id")));

ALTER TABLE "public"."problem_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."problems_and_tags" AS
 SELECT "problems"."id",
    "problems"."title",
    "problems"."description",
    "problems"."created_at",
    "problems"."problem_box_id",
    "problem_boxes"."title" AS "problem_box_title",
    "problem_boxes"."description" AS "problem_box_description",
    "problem_boxes"."thumbnail_url" AS "problem_box_thumbnail_url",
    "problem_tags"."id" AS "problem_tag_id",
    "problem_tags"."name" AS "tag"
   FROM ((("public"."problems"
     LEFT JOIN "public"."problem_boxes" ON (("problem_boxes"."id" = "problems"."problem_box_id")))
     LEFT JOIN "public"."problems_tag_belongs_problem" ON (("problems"."id" = "problems_tag_belongs_problem"."problem_id")))
     LEFT JOIN "public"."problem_tags" ON (("problems_tag_belongs_problem"."problem_tag_id" = "problem_tags"."id")));

ALTER TABLE "public"."problems_and_tags" OWNER TO "postgres";

ALTER TABLE "public"."problems" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."problems_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."problems_tag_belongs_problem" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."problems_tag_belongs_problem_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."problem_boxes"
    ADD CONSTRAINT "problem-boxes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."problem_tags"
    ADD CONSTRAINT "problem-tags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."problem_files"
    ADD CONSTRAINT "problem_files_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."problems"
    ADD CONSTRAINT "problems_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."problems_tag_belongs_problem"
    ADD CONSTRAINT "problems_tag_belongs_problem_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."problem_files"
    ADD CONSTRAINT "problem_files_problem_id_fkey" FOREIGN KEY ("problem_id") REFERENCES "public"."problems"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."problems"
    ADD CONSTRAINT "problems_problem_box_id_fkey" FOREIGN KEY ("problem_box_id") REFERENCES "public"."problem_boxes"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."problems_tag_belongs_problem"
    ADD CONSTRAINT "problems_tag_belongs_problem_problem_id_fkey" FOREIGN KEY ("problem_id") REFERENCES "public"."problems"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."problems_tag_belongs_problem"
    ADD CONSTRAINT "problems_tag_belongs_problem_problem_tag_id_fkey" FOREIGN KEY ("problem_tag_id") REFERENCES "public"."problem_tags"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."problems"
    ADD CONSTRAINT "problems_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

CREATE POLICY "acess_problems" ON "public"."problems" TO "authenticated" USING (("auth"."role"() = 'authenticated'::"text"));

ALTER TABLE "public"."problems" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."get_problem_box_with_problems"("p_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_problem_box_with_problems"("p_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_problem_box_with_problems"("p_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."get_problem_with_tags"("p_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_problem_with_tags"("p_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_problem_with_tags"("p_id" bigint) TO "service_role";

GRANT ALL ON TABLE "public"."problem_boxes" TO "anon";
GRANT ALL ON TABLE "public"."problem_boxes" TO "authenticated";
GRANT ALL ON TABLE "public"."problem_boxes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."problem-boxes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."problem-boxes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."problem-boxes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."problem_tags" TO "anon";
GRANT ALL ON TABLE "public"."problem_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."problem_tags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."problem-tags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."problem-tags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."problem-tags_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."problem_files" TO "anon";
GRANT ALL ON TABLE "public"."problem_files" TO "authenticated";
GRANT ALL ON TABLE "public"."problem_files" TO "service_role";

GRANT ALL ON SEQUENCE "public"."problem_files_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."problem_files_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."problem_files_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."problems" TO "anon";
GRANT ALL ON TABLE "public"."problems" TO "authenticated";
GRANT ALL ON TABLE "public"."problems" TO "service_role";

GRANT ALL ON TABLE "public"."problems_tag_belongs_problem" TO "anon";
GRANT ALL ON TABLE "public"."problems_tag_belongs_problem" TO "authenticated";
GRANT ALL ON TABLE "public"."problems_tag_belongs_problem" TO "service_role";

GRANT ALL ON TABLE "public"."problem_view" TO "anon";
GRANT ALL ON TABLE "public"."problem_view" TO "authenticated";
GRANT ALL ON TABLE "public"."problem_view" TO "service_role";

GRANT ALL ON TABLE "public"."problems_and_tags" TO "anon";
GRANT ALL ON TABLE "public"."problems_and_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."problems_and_tags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."problems_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."problems_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."problems_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."problems_tag_belongs_problem_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."problems_tag_belongs_problem_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."problems_tag_belongs_problem_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
